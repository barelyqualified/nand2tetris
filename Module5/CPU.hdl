// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
   // Checks if it's a A- or C-instruction. Reads the first bit of the given instruction as it is the opcode.
    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=instruct);
	/* Read instruction from Program memory input or ALU output. */
    Not(in=instruction[15], out=loada);
    Or(a=loada, b=instruction[5], out=lol); // A = A+1 instructions
    ARegister(in=instruct , load=lol , out=ARegisterOut, out[0..14]=addressM );

	/* D register is based on the output of the ALU */
    And(a=instruction[15], b=instruction[4], out=IsCAndLoadD);
    DRegister(in=ALUOutput , load=IsCAndLoadD , out=DOutput );
    /* check if it's m input or normal a register based on if it's a c instruction */
    And(a=instruction[15], b=instruction[12], out=AorMData);
    Mux16(a=ARegisterOut, b=inM, sel=AorMData, out=AluInput2);
    /* Check for jumps */
	/* Check v4 */
	Not(in=instruction[2], out=notinstruction2);
	And(a=instruction[0], b=notlesszero, out=case1p1);
	And(a=case1p1, b=noteqzero, out=case1f);
	
	/* Check v3 */
	Not(in=lesszero, out=notlesszero);
	And(a=instruction[1], b=eqzero, out=case2p1);
	And(a=case2p1, b=notlesszero, out=case2f);
	
	/* Check v2 */
	Not(in=eqzero, out=noteqzero);
	And(a=instruction[2], b=noteqzero, out=case3p1);
	And(a=case3p1, b=lesszero, out=case3f);

	/* Check if any of the cases are true */
	Or(a=case1f, b=case2f, out=fincheckp1);
	Or(a=fincheckp1, b=case3f, out=fincheckf);
	
    And(a=fincheckf,b=instruction[15], out=actualjump); // Only jump on c-instructions

    PC(in=ARegisterOut , load=actualjump , inc=true, reset=reset, out[0..14]=pc );
	And(a=instruction[3], b=instruction[15], out=writeM);


    ALU(x=DOutput , y=AluInput2, zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=ALUOutput , zr=eqzero , ng=lesszero, out=outM );

}